{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Lil Engie 2 Docs An open source game engine Lil Engie 2 is currently in development and not ready to be used to build any games, you can however use this as a learning resource! To follow the delopment and keep up with the changes to the engines as well as implementation details/notes, please refer to the trello board that I use for development. Lil Engie Trello The documentation is also in development and everything will be manually written. While this means the documentation that is provided will actually be much more helpful, this also means that until these docs are caught up with the devlopment of Lil Engie, it will not cover everything in the engine.","title":"Welcome"},{"location":"#welcome-to-lil-engie-2-docs","text":"An open source game engine Lil Engie 2 is currently in development and not ready to be used to build any games, you can however use this as a learning resource! To follow the delopment and keep up with the changes to the engines as well as implementation details/notes, please refer to the trello board that I use for development. Lil Engie Trello The documentation is also in development and everything will be manually written. While this means the documentation that is provided will actually be much more helpful, this also means that until these docs are caught up with the devlopment of Lil Engie, it will not cover everything in the engine.","title":"Welcome to Lil Engie 2 Docs"},{"location":"Debug/Log/","text":"Lil Engie Logging #include <Core/Debug/Log.h> Lil Engie features a simple logging system with various verobosities to allow for easy filtering of the console. Macros Macro Use case LIL_LOG(...) Logs with default Log verbosity. (Use this for most logs) LIL_WARN(...) Logs with Warning verbosity LIL_ERROR(...) Logs with Error verbosity LIL_FATAL(...) Logs with Fatal verbosity","title":"Log"},{"location":"Debug/Log/#lil-engie-logging","text":"#include <Core/Debug/Log.h> Lil Engie features a simple logging system with various verobosities to allow for easy filtering of the console.","title":"Lil Engie Logging"},{"location":"Debug/Log/#macros","text":"Macro Use case LIL_LOG(...) Logs with default Log verbosity. (Use this for most logs) LIL_WARN(...) Logs with Warning verbosity LIL_ERROR(...) Logs with Error verbosity LIL_FATAL(...) Logs with Fatal verbosity","title":"Macros"},{"location":"Math/LilMath/","text":"Lil Math #include <Core/Math/LilMath.h> Lil Engie uses a custom math library Lil Math with a syntactically inspired style to glsl's math.","title":"LilMath"},{"location":"Math/LilMath/#lil-math","text":"#include <Core/Math/LilMath.h> Lil Engie uses a custom math library Lil Math with a syntactically inspired style to glsl's math.","title":"Lil Math"},{"location":"Math/mat4/","text":"Lil Math - mat4 #include <Core/Math/LilMath.h> The 4x4 Matrix class for Lil Math mat4 uses a column major matrix order Constructors mat4() Empty constructor initializes matrix to identity matrix mat4(float d) Initializes a matrix with the given diagonal d mat4(const float* e) Initializes matrix using float array, assumes 16 floats in size mat4(const vec4* col) Initializes based on array of column vectors, assumes 4 vec4s in size mat4(vec4 r0, vec4 r1, vec4 r2, vec4 r3) Constructs matrix using row vectors for easy to read construction Methods vec4 row(int i) const Returnes the row vector of given index i Functions vec4 mul(const mat4& m, const vec4& v) Multiplies mat4 by vec4 mat4 mul(const mat4& a, const mat4& b) Multiplies the two matrices mat4 translate(vec3 v) Generates a translation matrix given a single translation vector v. The translation goes on the 4th column on first 3 rows in xyz order. void translate(mat4& m, vec3 v) Translates a given matrix by the vector v. mat4 rotate(vec3 euler) Generates a rotation matrix given a 3d vector representing euler angles. The rotation order is XYZ. And each axis is (Pitch, Yaw, Roll) to rotate about their own axis. void rotate(mat4& m, vec3 euler) Rotates a given matrix the euler angles. mat4 scale(vec3 v) Generates a scale matrix void scale(mat4& m, vec3 v) Scales the given matrix by v mat4 projection(float r, float l, float t, float b, float n, float f) Creates a perspective projection matrix with components: right, left, top, bottom, near, far. The larger the difference in z, the less precision in a given unit for the depth buffer. Also keep in mind that the depth buffer is more precise closer to the camera as this will place things non-linearly depth wise. float determinant(const mat4& m) Calculates the determinant of the given matrix mat4 inverse(const mat4& m) Calculates the inverse of the given matrix, if the determinant is 0 it will return a matrix with all elements of 0. mat4 transpose(const mat4& m) Transposes the given matrix and returns it as a new one Union float m[16] Each individual element of the matrix in column major order as a 4 byte float vec4 v[4] Each individual column vector of the matrix","title":"mat4"},{"location":"Math/mat4/#lil-math-mat4","text":"#include <Core/Math/LilMath.h> The 4x4 Matrix class for Lil Math mat4 uses a column major matrix order","title":"Lil Math - mat4"},{"location":"Math/mat4/#constructors","text":"mat4() Empty constructor initializes matrix to identity matrix mat4(float d) Initializes a matrix with the given diagonal d mat4(const float* e) Initializes matrix using float array, assumes 16 floats in size mat4(const vec4* col) Initializes based on array of column vectors, assumes 4 vec4s in size mat4(vec4 r0, vec4 r1, vec4 r2, vec4 r3) Constructs matrix using row vectors for easy to read construction","title":"Constructors"},{"location":"Math/mat4/#methods","text":"vec4 row(int i) const Returnes the row vector of given index i","title":"Methods"},{"location":"Math/mat4/#functions","text":"vec4 mul(const mat4& m, const vec4& v) Multiplies mat4 by vec4 mat4 mul(const mat4& a, const mat4& b) Multiplies the two matrices mat4 translate(vec3 v) Generates a translation matrix given a single translation vector v. The translation goes on the 4th column on first 3 rows in xyz order. void translate(mat4& m, vec3 v) Translates a given matrix by the vector v. mat4 rotate(vec3 euler) Generates a rotation matrix given a 3d vector representing euler angles. The rotation order is XYZ. And each axis is (Pitch, Yaw, Roll) to rotate about their own axis. void rotate(mat4& m, vec3 euler) Rotates a given matrix the euler angles. mat4 scale(vec3 v) Generates a scale matrix void scale(mat4& m, vec3 v) Scales the given matrix by v mat4 projection(float r, float l, float t, float b, float n, float f) Creates a perspective projection matrix with components: right, left, top, bottom, near, far. The larger the difference in z, the less precision in a given unit for the depth buffer. Also keep in mind that the depth buffer is more precise closer to the camera as this will place things non-linearly depth wise. float determinant(const mat4& m) Calculates the determinant of the given matrix mat4 inverse(const mat4& m) Calculates the inverse of the given matrix, if the determinant is 0 it will return a matrix with all elements of 0. mat4 transpose(const mat4& m) Transposes the given matrix and returns it as a new one","title":"Functions"},{"location":"Math/mat4/#union","text":"float m[16] Each individual element of the matrix in column major order as a 4 byte float vec4 v[4] Each individual column vector of the matrix","title":"Union"},{"location":"Math/vec3/","text":"Lil Math - vec3 #include <Core/Math/LilMath.h> The 3D vector class for Lil Math Constructors vec4() Empty constructor initializes all components to 0 vec4(float x, float y, float z) Initializes corresponding elements in XYZ order Functions float dot(vec3 a, vec3 b) Returns scalar result of dot product. (Sum of product of each component) foat len(vec3 vec) Calculates the real length of the given vector float len2(vec3 vec) Calculates the squared length of the given vector. This is a much faster operation. Is the equivilent of dot(v, v) void normalize(vec3& vec) Normalizes given vector to make vector length of 1 vec3 cross(vec3 a, vec3 b) Calculates the cross product of a x b Union x, y, z Each individual component as 4 byte floats r, g, b Each individual component using color variables as 4 byte floats s[3] Each component stored as a 4 element array","title":"vec3"},{"location":"Math/vec3/#lil-math-vec3","text":"#include <Core/Math/LilMath.h> The 3D vector class for Lil Math","title":"Lil Math - vec3"},{"location":"Math/vec3/#constructors","text":"vec4() Empty constructor initializes all components to 0 vec4(float x, float y, float z) Initializes corresponding elements in XYZ order","title":"Constructors"},{"location":"Math/vec3/#functions","text":"float dot(vec3 a, vec3 b) Returns scalar result of dot product. (Sum of product of each component) foat len(vec3 vec) Calculates the real length of the given vector float len2(vec3 vec) Calculates the squared length of the given vector. This is a much faster operation. Is the equivilent of dot(v, v) void normalize(vec3& vec) Normalizes given vector to make vector length of 1 vec3 cross(vec3 a, vec3 b) Calculates the cross product of a x b","title":"Functions"},{"location":"Math/vec3/#union","text":"x, y, z Each individual component as 4 byte floats r, g, b Each individual component using color variables as 4 byte floats s[3] Each component stored as a 4 element array","title":"Union"},{"location":"Math/vec4/","text":"Lil Math - vec4 #include <Core/Math/LilMath.h> The 4D vector class for Lil Math Constructors vec4() Empty constructor initializes all components to 0 vec4(float x, float y, float z, float w) Initializes corresponding elements in XYZW order vec4(vec3 v3, float w) Initializes XYZ components to given vec3 with trailing scalar for W Functions float dot(vec4 a, vec4 b) Returns scalar result of dot product. (Sum of product of each component) foat len(vec4 vec) Calculates the real length of the given vector float len2(vec4 vec) Calculates the squared length of the given vector. This is a much faster operation. Is the equivilent of dot(v, v) void normalize(vec4& vec) Normalizes given vector to make vector length of 1 Union x, y, z, w Each individual component as 4 byte floats r, g, b, a Each individual component using color variables as 4 byte floats v3 XYZ component vec3 s[4] Each component stored as a 4 element array","title":"vec4"},{"location":"Math/vec4/#lil-math-vec4","text":"#include <Core/Math/LilMath.h> The 4D vector class for Lil Math","title":"Lil Math - vec4"},{"location":"Math/vec4/#constructors","text":"vec4() Empty constructor initializes all components to 0 vec4(float x, float y, float z, float w) Initializes corresponding elements in XYZW order vec4(vec3 v3, float w) Initializes XYZ components to given vec3 with trailing scalar for W","title":"Constructors"},{"location":"Math/vec4/#functions","text":"float dot(vec4 a, vec4 b) Returns scalar result of dot product. (Sum of product of each component) foat len(vec4 vec) Calculates the real length of the given vector float len2(vec4 vec) Calculates the squared length of the given vector. This is a much faster operation. Is the equivilent of dot(v, v) void normalize(vec4& vec) Normalizes given vector to make vector length of 1","title":"Functions"},{"location":"Math/vec4/#union","text":"x, y, z, w Each individual component as 4 byte floats r, g, b, a Each individual component using color variables as 4 byte floats v3 XYZ component vec3 s[4] Each component stored as a 4 element array","title":"Union"}]}